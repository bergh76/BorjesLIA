@model BorjesLIA.Models.Video.VideoModel

@{
    ViewBag.Title = "Edit";
}
<body class="nav-md">
    <div class="container-dashboard body">
        <div class="main_container">
            <div class="col-md-3 left_col">
                <div class="left_col scroll-view">
                    @Html.Partial("_AdminPanel")
                </div>
            </div>
            <div class="right_col" role="main">
                <h2>Edit</h2>

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>VideoModel</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ID)

                        <div class="form-group">
                            @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                }

                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>


                <div id="getProp" data-prop="@Html.DisplayFor(model => model.ID)"></div>

                <section id="show-result-box" class="hidden">
                    <iframe width="560"
                            height="315"
                            id="myVideoID"
                            src=""
                            frameborder="0"
                            allowfullscreen></iframe>
                </section>

                <video width="560" height="315" controls, id="videoID">
                    <source src="" type="video/mp4">
                </video>
            </div>
        </div>
    </div>



    <script>
        $(document).ready(function () {
            //ger yt vad den behöver
            var tag = document.createElement('script');
            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            var player;

            //Skaffa property
            var propID = document.getElementById('getProp');
            var prop = propID.getAttribute('data-prop');
            //skickar in id för att hämta rätt url
            $.ajax({
                type: "POST",
                url: "/VideoModels/CallJsShowVideo",
                traditional: true,
                data: {
                    videoID: prop,
                }
            }).done(function (data) {
                //får tillbaka url
                if (data.success === true) {
                    var getString = data.returnData;
                    var checkString = getString.includes("/Content/videos/");
                    //on video är lokal
                    if (checkString) {

                        $('#videoID').attr("src", data.returnData);

                        //$('#show-result-box').removeClass('hidden');
                    }
                        // om video är yt
                    else {
                        //Skapa spelare med API för att kunna ta ut duration
                        $('#myVideoID').attr("src", data.returnData);
                        $('#show-result-box').removeClass('hidden');
                        player = new YT.Player('myVideoID', {
                            events: {
                                'onReady': onPlayerReady
                            }
                        });
                    }

                } else {
                    alert(data.errorMessage)
                    //location.reload();
                }
            }).fail(function (e) {
                alert('Fail. Cannot show video at this time')
                //location.reload();
            });
            //});
            function onPlayerReady(event) {

                //event.target.playVideo();
            }

        });
    </script>
</body>